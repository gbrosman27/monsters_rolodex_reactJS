{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIaA,G,MAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UAEI,qBAAKC,IAAI,UACTC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEH,6BACKL,EAAMI,QAAQE,OAEnB,4BACKN,EAAMI,QAAQG,aCTdC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCF9CM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACAZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCuDCG,G,wDA1Db,aAAc,IAAD,8BACX,gBAoBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAnBtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALJ,E,gEAcO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAQlC,MAC4BC,KAAKN,MAA/Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YAKZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OACC,sBAAK9B,UAAU,MAAf,UACE,mDACA,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUJ,SAAWoB,W,GA3CVI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.19d92dea.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        {/* Changes the monster in accordance with the user id. Size set to 180x180. Monster images from API. */}\r\n        <img alt=\"monster\" \r\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} \r\n        />\r\n        <h2>\r\n            {props.monster.name}\r\n        </h2>\r\n        <p>\r\n            {props.monster.email}\r\n        </p>\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\n//Props is the argument sent from App.js that allows access to the monsters array.\r\nexport const CardList = props => (\r\n    <div className='card-list'>\r\n        {props.monsters.map(monster => (<Card key={monster.id} monster={monster} />))}\r\n    </div>\r\n);","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\n\r\n// Functional component search box. Props (destructured) to keep the search bar more dynamic.\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <input \r\n    className='search' \r\n    type='search' \r\n    placeholder={placeholder} \r\n    onChange={handleChange}/>\r\n);","import React, { Component } from 'react'; //Component is part of React library. Allows us to write html in a javascript file.\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\n\nclass App extends Component{\n  constructor(){\n    super(); //Calls constructor method of the Component class. Gives us access to this.state which exists on the class App.\n              // Can set default value on the state object. Can use variables in the html to be rendered.\n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n\n    //Context of 'this' is whatever we pass to it via .bind method. Needed if not using arrow function.\n    //Without .bind, the handle change function below will have 'this' as undefined.\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  //Gets user data from the API and returns json. This is a lifecycle method.\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  //Due to arrow function, scope is wherever function is defined. Otherwise need .bind.\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render(){ //render method returns any html we want\n    const { monsters, searchField } = this.state; //Destructered.\n\n    //Uses the filter method to sift through the monsters array according to what is typed in the searchfield. \n    //Converted to lower case.\n    //Re-renders each time.\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    // Return the component with the props they require.\n    return ( \n     <div className='App'>\n       <h1>Monster's Rolodex</h1>\n       <SearchBox \n       placeholder='search monsters'\n       handleChange={this.handleChange} />\n\n       <CardList monsters={ filteredMonsters } />\n      </div>\n    );\n  }\n}\n\n//Everything between the divs is JSX which mimics what html does so we can create the virtual DOM \n//and break down each part of the app into components that keep getting re-rendered as we modify the state.\n//The curly braces inside the JSX tells html that anything in between is a javascript expression.\n//this.setState allows us to modify the properties and values on the state. \n//onClick, it will set the state to what ever we passed to it, and then re-render.\n//Gives more control on what we want the components to display without altering default values.\n//Anytime you use the map() function inside of render, or you have a list of the same jsx elements one after another, \n//they need a key attribute (and CRA will warn you about it if you miss it).\n\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'; //Allows us to write html in a javascript file\nimport ReactDOM from 'react-dom'; //The little \"robot\" that interacts with the DOM for us.\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}